const path = require('path');
const MessageHandler = require('./messageHandler');
const { getShadowAuthData, getUserByPhone, setContactData, createCase, getActiveUser,createActiveUser, setSatisfactionLevel, getUserCases, closeCase, setFeedback, getContactCases, getCaseByNumber, getCaseStates, getCase, createComment, getContacts, getContactById, getMessagesByCaseId, getContactIdByTelegramId, getSatisfactionLeveId } = require('../apiServices');
class PrivateMessageHandler extends MessageHandler {
    async handleText(bot, msg, userConnections) {
        if (msg.text === "/start" || msg.text === "/start@CRM_Genesis_Support_bot") {
            userConnections[msg.chat.id] = {
                Id: msg.chat.id
            }
            await bot.sendMessage(msg.chat.id, `–í—ñ—Ç–∞—é, ${msg.chat.first_name} !üëãüèª`, {
                reply_markup: {
                    remove_keyboard: true
                }
            });
            let authResult = await getShadowAuthData(userConnections[msg.chat.id]);
            if (authResult === "access denied") {
                await bot.sendMessage(msg.chat.id, '–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–∞–¥–∞–π—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üì≤', {
                    reply_markup: {
                        keyboard: [
                            [{ text: "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üì≤", request_contact: true }]
                        ]
                    }
                });
            } else if (authResult === "access allowed") {
                let user = await getActiveUser(msg.chat.id);
                if (!user) {
                    await createActiveUser(userConnections[msg.chat.id]);
                }
                await bot.sendMessage(msg.chat.id, `–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ‚úÖ`);
                await bot.sendMessage(msg.chat.id, `–ú–µ–Ω—é –±–æ—Ç–∞üîé`, {
                    reply_markup: {
                        keyboard: [
                            ['–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–µ–π—ÅüÜï'],
                            ['–ú–æ—ó –∫–µ–π—Å–∏üìé']
                        ],
                        resize_keyboard: true
                    }
                });
                userConnections[msg.chat.id].status = 1;
            }
        } else if (!userConnections[msg.chat.id]) {
            return;
        } else if (msg.text === "/menu" || msg.text === '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é ‚¨ÖÔ∏è' || msg.text === "/menu@CRM_Genesis_Support_bot" && userConnections[msg.chat.id] && userConnections[msg.chat.id].status > 0) {
            await bot.sendMessage(msg.chat.id, "–ú–µ–Ω—éüîé", {
                reply_markup: {
                    keyboard: [
                        ['–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–µ–π—ÅüÜï'],
                        ['–ú–æ—ó –∫–µ–π—Å–∏üìé']
                    ],
                    resize_keyboard: true
                }
            });
            userConnections[msg.chat.id].status = 1;
        } else if (msg.text === "/cancel") {
            userConnections[msg.chat.id].status = 0;
            await bot.sendMessage(msg.chat.id, "–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ‚ôªÔ∏è", {
                reply_markup: {
                    remove_keyboard: true
                }
            });
        } else if (!userConnections[msg.chat.id].status) {
            return;
        } else if (userConnections[msg.chat.id].status >= 1 && msg.text === "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–µ–π—ÅüÜï") {
            await bot.sendMessage(msg.chat.id, "–î–∞–π—Ç–µ –Ω–∞–∑–≤—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—é üñç", {
                reply_markup: {
                    remove_keyboard: true
                }
            });
            userConnections[msg.chat.id].status = 2;
        } else if (userConnections[msg.chat.id].status >= 1 && msg.text === "–ú–æ—ó –∫–µ–π—Å–∏üìé") {
            let caseStates = await getCaseStates();
            let inline_keyboard = [[{ text: "–í—Å—ñ –∫–µ–π—Å–∏", callback_data: "GetAllCases" }], [{ text: "–ü–æ—à—É–∫ –∑–∞ –Ω–æ–º–µ—Ä–æ–º", callback_data: "SearchNum" }]];
            caseStates.forEach(async (item) => {
                inline_keyboard.push([{ text: item.Name, callback_data: "Stage" + item.Name}]);
            });
            await bot.sendMessage(msg.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–µ–π—Å—É ‚ôªÔ∏è", {
                reply_markup: {
                    inline_keyboard: inline_keyboard
                }
            });
            userConnections[msg.chat.id].lastDate = undefined;
            userConnections[msg.chat.id].lastDateIndex = undefined;
            userConnections[msg.chat.id].lastDateCounter = undefined;
            userConnections[msg.chat.id].status = 5;
        } else if (userConnections[msg.chat.id].status === 2) {
            userConnections[msg.chat.id].appeal = {
                subject: msg.text,
                files: []
            }
            await bot.sendMessage(msg.chat.id, `–û–ø–∏—à—ñ—Ç—å –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—ÉüéØ`, {
                reply_markup: {

                }
            });
            userConnections[msg.chat.id].status = 3;
        } else if (userConnections[msg.chat.id].status === 3) {
            if (userConnections[msg.chat.id].appeal) {
                userConnections[msg.chat.id].appeal.description = msg.text;
            }
            await bot.sendMessage(msg.chat.id, `–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –¥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ñ–∞–π–ª(—Å–∫—Ä—ñ–Ω—à–æ—Ç, –¥–æ–∫—É–º–µ–Ω—Ç, —Ç–æ—â–æ)?üìÑ`, {
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: "–¢–∞–∫", callback_data: "AcceptAddingDocument" },
                        { text: "–ù—ñ", callback_data: "DeclineAddingDocument" }],
                    ]
                })
            });
        } else if (userConnections[msg.chat.id].status === 4) {
            let appealNum = await createCase(userConnections[msg.chat.id]);
            await bot.sendMessage(msg.chat.id, `–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ –ø—ñ–¥ –Ω–æ–º–µ—Ä–æ–º ${appealNum}!‚úÖ `, {
                reply_markup: {
                    keyboard: [
                        ['–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é ‚¨ÖÔ∏è']
                    ],
                    resize_keyboard: true
                }
            });
            userConnections[msg.chat.id].status == 1;
        } else if (userConnections[msg.chat.id].status == 6) {
            userConnections[msg.chat.id].case.message = msg.text;
            // TODO: maybe we can do better this functional
            let contacts = await getContacts();
            userConnections[msg.chat.id].case.senderId = contacts.value.filter(c => c.UsrTelegramId == msg.chat.id)[0].Id;
            let result = await createComment(userConnections[msg.chat.id]);
            if (result) {
                await bot.sendMessage(msg.chat.id, `–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ `, {
                    reply_markup: {
                        keyboard: [
                            ['–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é ‚¨ÖÔ∏è']
                        ],
                        resize_keyboard: true
                    }
                });
            }
        } else if (userConnections[msg.chat.id].status == 9) {
            let example = await getCaseByNumber(msg.text);
            let currentContactId = await getContactIdByTelegramId(msg.chat.id);
            let contactInCase = example[0].ContactId;
            if (!example[0] || (currentContactId != contactInCase)) {
                await bot.sendMessage(msg.chat.id, `üìÅ –ö–µ–π—Å –∑–∞ –Ω–æ–º–µ—Ä–æ–º ${msg.text} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`, {
                    reply_markup: {
                        keyboard: [
                            ['–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é ‚¨ÖÔ∏è']
                        ],
                        resize_keyboard: true
                    }
                });
                return;
            }
            let inline_keyboard = [];
            let caseInfo = {
                caseId: example[0].Id 
            }
            inline_keyboard.push([{ text: "–î–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data: "AddBComm" + example[0].Id }], [{ text: "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data: "DownloadCm" + JSON.stringify(caseInfo)}]);
            if (!this.caseStatusesIgnoreList.includes(example[0].StatusId)) {
                inline_keyboard.push([{ text: "–ó–∞–∫—Ä–∏—Ç–∏ –∫–µ–π—Å", callback_data: "CloseCase" + example[0].Id }]);
            }
            await bot.sendMessage(msg.chat.id, "üìÅ –ö–µ–π—Å - " + example[0].Number + `\n\n–ù–∞–∑–≤–∞: ${example[0].Subject}\n\n–ü—Ä–æ–±–ª–µ–º–∞: ${example[0].Symptoms}`, {
                reply_markup: JSON.stringify({
                    inline_keyboard: inline_keyboard
                })
            });
        } else if (userConnections[msg.chat.id].status == 10) {
            await setFeedback(msg.text, userConnections[msg.chat.id].case.Id);
            await bot.sendMessage(msg.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –í–∞—à –≤—ñ–¥–≥—É–∫ ‚úÖ\n–í—ñ–Ω –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —è–∫—ñ—Å—Ç—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è");
        }
    }
    async handleContact(bot, msg, userConnections) {
        await bot.sendMessage(msg.chat.id, '–ú–µ–Ω—é –∑–∞–∫—Ä–∏—Ç–æ‚ùå', {
            reply_markup: {
                remove_keyboard: true
            }
        });

        if (userConnections[msg.chat.id] && msg.chat.id === userConnections[msg.chat.id].Id) {
            if (!msg.contact.phone_number.startsWith('+')) {
                userConnections[msg.chat.id].phoneNumber = "+" + msg.contact.phone_number;
            } else {
                userConnections[msg.chat.id].phoneNumber = msg.contact.phone_number;
            }
            let result = await getUserByPhone(userConnections[msg.chat.id]);

            if (!result || result === "access denied") {
                return bot.sendMessage(msg.chat.id, '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ‚ùå');
            }
            await bot.sendMessage(msg.chat.id, `–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ‚úÖ`);
            userConnections[msg.chat.id].status = 1;
            await setContactData(userConnections[msg.chat.id]);
            await bot.sendMessage(msg.chat.id, `–ú–µ–Ω—é –±–æ—Ç–∞üîé`, {
                reply_markup: {
                    keyboard: [
                        ['–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–µ–π—ÅüÜï'],
                        ['–ú–æ—ó –∫–µ–π—Å–∏üìé']
                    ],
                    resize_keyboard: true
                }
            });
        }
    }
    async handleCallbackQuery(bot, msg, userConnections) {
        if (!userConnections[msg.message.chat.id] || !userConnections[msg.message.chat.id].status) {
            return;
        }
        if (userConnections[msg.message.chat.id].status == 3 && msg.data == "AcceptAddingDocument") {
            await bot.sendMessage(msg.message.chat.id, `–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç üìÉ`);
        } else if (userConnections[msg.message.chat.id].status == 3 && msg.data == "DeclineAddingDocument") {
            let appealNum = await createCase(userConnections[msg.message.chat.id]);
            await bot.sendMessage(msg.message.chat.id, `–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ –ø—ñ–¥ –Ω–æ–º–µ—Ä–æ–º ${appealNum}!‚úÖ `, {
                reply_markup: {
                    keyboard: [
                        ['–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é ‚¨ÖÔ∏è']
                    ],
                    resize_keyboard: true
                }
            });
            userConnections[msg.message.chat.id].status = 1;
        } else if (msg.data.startsWith('Stage')) {
            msg.data = msg.data.replace('Stage', '');
            let cases = await getUserCases(userConnections[msg.message.chat.id], msg.data);
            let inline_keyboard = [];
            cases.forEach(async (item) => {
                inline_keyboard.push([{ text: item.Value, callback_data: item.Key }]);
            });
            if (inline_keyboard.length > 0) {
                await bot.sendMessage(msg.message.chat.id, "–ö–µ–π—Å–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º " + msg.data + " üóì", {
                    reply_markup: JSON.stringify({
                        inline_keyboard: inline_keyboard
                    })
                });
            } else {
                await bot.sendMessage(msg.message.chat.id, "–ö–µ–π—Å–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º " + msg.data + " –≤—ñ–¥—Å—É—Ç–Ω—ñ ‚ùå");
            }
            userConnections[msg.message.chat.id].status = 7;
        } else if (msg.data.startsWith('SearchNum')) {
            await bot.sendMessage(msg.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–µ–π—Å—Éüñä", {
                reply_markup: {
                    remove_keyboard: true
                }
            });
            userConnections[msg.message.chat.id].status = 9;
        } else if (msg.data.startsWith("AddBComm")) {
            userConnections[msg.from.id].case = {
                caseId: msg.data.replace("AddBComm", ""),
            };
            await bot.sendMessage(msg.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è‚úçÔ∏è", {
                reply_markup: {
                    remove_keyboard: true
                }
            });
            userConnections[msg.message.chat.id].status = 6;
        } else if (msg.data.startsWith("CloseCase")) {
            await closeCase(msg.data.replace("CloseCase", ""));
            await bot.sendMessage(msg.message.chat.id, "–ö–µ–π—Å —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ ‚ùå", {
                reply_markup: {
                    keyboard: [
                        ['–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é ‚¨ÖÔ∏è']
                    ],
                    resize_keyboard: true
                }
            });
        } else if (msg.data.startsWith("AddComment")) {
            //TODO ???
            userConnections[msg.from.id].case = JSON.parse(msg.data.replace("AddComment", ""));
            await bot.sendMessage(msg.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è‚úçÔ∏è", {
                reply_markup: {
                    remove_keyboard: true
                }
            });
            userConnections[msg.from.id].status = 6;
        } else if (msg.data.startsWith("DownloadCm")) {
            let messages = await getMessagesByCaseId(JSON.parse(msg.data.replace("DownloadCm", "")).caseId);
            if (messages.length === 0) {
                await bot.sendMessage(msg.message.chat.id, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É –∫–µ–π—Å—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ üí§", {
                    reply_markup: {
                        keyboard: [
                            ['–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é ‚¨ÖÔ∏è']
                        ],
                        resize_keyboard: true
                    }
                });
                return;
            }
            messages.sort((a, b) => new Date(b.CreatedOn) - new Date(a.CreatedOn));
            let messagesLength = (messages.length > 5) ? 5 : messages.length;
            let counter = (!userConnections[msg.message.chat.id].lastCommentCounter) ? messagesLength : userConnections[msg.message.chat.id].lastCommentCounter;
            if (!userConnections[msg.message.chat.id].lastCommentIndex) {
                userConnections[msg.message.chat.id].lastCommentIndex = 0;
            }
            if (!userConnections[msg.message.chat.id].lastCommentCounter) {
                userConnections[msg.message.chat.id].lastCommentCounter = 5;
            }
            for (let i = userConnections[msg.message.chat.id].lastCommentIndex; i < counter + userConnections[msg.message.chat.id].lastCommentIndex; i++) {
                let inline_keyboard = [];
                let contact = await getContactById(messages[i].CreatedById);
                if (i === counter - 1 && counter >= 5) { 
                    inline_keyboard.push([{ text: "–ü–æ–∫–∞–∑–∞—Ç–∏ —â–µ", callback_data: msg.data}])
                }
                await bot.sendMessage(msg.message.chat.id, `–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ üë§: ${contact.Name}\n\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üìù:\n${messages[i].Message}`, {
                    reply_markup: JSON.stringify({
                        inline_keyboard: inline_keyboard
                    })
                });
                if (i === counter - 1) {
                    break;
                }
            }
            /*for (let i = 0; i < counter; i++) {
                let inline_keyboard = [];
                let contact = await getContactById(messages[i].CreatedById);
                if (i === counter - 1 && counter >= 5) { 
                    inline_keyboard.push([{ text: "–ü–æ–∫–∞–∑–∞—Ç–∏ —â–µ", callback_data: msg.data}])
                }
                await bot.sendMessage(msg.message.chat.id, `–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ üë§: ${contact.Name}\n\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üìù:\n${messages[i].Message}`, {
                    reply_markup: JSON.stringify({
                        inline_keyboard: inline_keyboard
                    })
                });
            }*/
        } else if (msg.data.startsWith("GetAllCases")) {
            let currentContactId = await getContactIdByTelegramId(msg.message.chat.id);
            let cases = await getContactCases(currentContactId);
            if (userConnections[msg.message.chat.id].lastDate) {
                cases = cases.filter(c => new Date(c.CreatedOn) > new Date(userConnections[msg.message.chat.id].lastDate));
            }
            cases.sort((a, b) => new Date(a.CreatedOn) - new Date(b.CreatedOn));
            if (cases.length == 0) {
                await bot.sendMessage(msg.message.chat.id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∫–µ–π—Å—ñ–≤ üßê", {
                    reply_markup: {
                        keyboard: [
                            ['–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é ‚¨ÖÔ∏è']
                        ],
                        resize_keyboard: true
                    }
                });
                return;
            }
            let casesLength = (cases.length > 5) ? 5 : cases.length;
            let counter = (!userConnections[msg.message.chat.id].lastDateCounter) ? casesLength : userConnections[msg.message.chat.id].lastDateCounter;
            if (!userConnections[msg.message.chat.id].lastDateIndex) {
                userConnections[msg.message.chat.id].lastDateIndex = 0;
            }
            if (!userConnections[msg.message.chat.id].lastDateCounter) {
                userConnections[msg.message.chat.id].lastDateCounter = 5;
            }
            for (let i = userConnections[msg.message.chat.id].lastDateIndex; i < counter + userConnections[msg.message.chat.id].lastDateIndex; i++) {
                let inline_keyboard = [];
                if (!cases[i]) { 
                    continue;
                }
                let caseInfo = {
                    caseId: cases[i].Id
                }
                inline_keyboard.push([{ text: "–î–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data: "AddBComm" + cases[i].Id }], [{ text: "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data: "DownloadCm" + JSON.stringify(caseInfo)}]);
                if (!this.caseStatusesIgnoreList.includes(cases[i].StatusId)) {
                    inline_keyboard.push([{ text: "–ó–∞–∫—Ä–∏—Ç–∏ –∫–µ–π—Å", callback_data: "CloseCase" + cases[i].Id }]);
                }
                if (i === counter - 1 && counter >= 5) {
                    inline_keyboard.push([{ text: "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ", callback_data: "GetAllCases"}]);
                    userConnections[msg.message.chat.id].lastDate = cases[0].CreatedOn;
                    userConnections[msg.message.chat.id].lastDateIndex = i + 1;
                    userConnections[msg.message.chat.id].lastDateCounter += 5;
                }
                await bot.sendMessage(msg.message.chat.id, "üìÅ –ö–µ–π—Å - " + cases[i].Number + `\n\n–ù–∞–∑–≤–∞: ${cases[i].Subject}\n\n–ü—Ä–æ–±–ª–µ–º–∞: ${cases[i].Symptoms}`, {
                    reply_markup: JSON.stringify({
                        inline_keyboard: inline_keyboard
                    })
                });
                if (i === counter - 1) {
                    break;
                }
            }
        } else if (msg.data.startsWith("ReviewMrk")) {
            let mark = msg.data.replace("ReviewMrk", "")[0];
            let caseId = JSON.parse(msg.data.replace("ReviewMrk", "").substring(1)).caseId;
            let satisfactionLevelId = await getSatisfactionLeveId(mark);
            await setSatisfactionLevel(satisfactionLevelId, caseId);
            await bot.sendMessage(msg.message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –í–∞—à—É –æ—Ü—ñ–Ω–∫—É ‚úÖ");
        } else if (msg.data.startsWith("ReviewComm")) {
            await bot.sendMessage(msg.message.chat.id, "üì¢ –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å —è–∫—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–æ—ó —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.\n–í–∞—à –≤—ñ–¥–≥—É–∫ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∏–π –¥–ª—è –Ω–∞—Å!", {
                reply_markup: {
                    remove_keyboard: true
                }
            });
            userConnections[msg.message.chat.id].case = {
                Id: JSON.parse(msg.data.replace("ReviewComm", "")).caseId
            };
            userConnections[msg.message.chat.id].status = 10;
        } else if (userConnections[msg.message.chat.id].status == 7) {
            let inline_keyboard = [];
            let example = await getCase(msg.data);
            if (!example) {
                return;
            }
            let caseInfo = {
                caseId: msg.data 
            }
            inline_keyboard.push([{ text: "–î–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data: "AddBComm" + msg.data }], [{ text: "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data: "DownloadCm" + JSON.stringify(caseInfo)}]);
            if (!this.caseStatusesIgnoreList.includes(example.StatusId)) {
                inline_keyboard.push([{ text: "–ó–∞–∫—Ä–∏—Ç–∏ –∫–µ–π—Å", callback_data: "CloseCase" + msg.data }]);
            }
            await bot.sendMessage(msg.message.chat.id, "üìÅ –ö–µ–π—Å - " + example.Number + `\n\n–ù–∞–∑–≤–∞: ${example.Subject}\n\n–ü—Ä–æ–±–ª–µ–º–∞: ${example.Symptoms}`, {
                reply_markup: JSON.stringify({
                    inline_keyboard: inline_keyboard
                })
            });
        }
    }
    async handleDocument(bot, msg, userConnections) {
        if (!userConnections[msg.chat.id] || !userConnections[msg.chat.id].status) {
            return;
        } else if (userConnections[msg.chat.id].status == 3) {
            let file = {};
            file.file_url = await bot.getFileLink(msg.document.file_id);
            file.file_name = msg.document.file_name;
            userConnections[msg.chat.id].appeal.files.push(file);
            let simulatedMessage = {
                chat: {
                    id: msg.chat.id,
                },
                text: 'ready',
            };
            if (!userConnections[msg.chat.id].appeal.documentFlag) {
                userConnections[msg.chat.id].appeal.documentFlag = true;
                setTimeout(function () {
                    bot.emit('text', simulatedMessage);
                }, 3000);
                userConnections[msg.chat.id].status = 4;
            }

        }
    }
    async handlePhoto(bot, msg, userConnections) {
        if (!userConnections[msg.chat.id] || !userConnections[msg.chat.id].status) {
            return;
        } else if (userConnections[msg.chat.id].status === 3) {
            let file = {};
            file.file_url = await bot.getFileLink(msg.photo[0].file_id);
            file.file_name = path.basename(file.file_url);
            userConnections[msg.chat.id].appeal.files.push(file);

            let simulatedMessage = {
                chat: {
                    id: msg.chat.id,
                },
                text: 'ready',
            };
            if (!userConnections[msg.chat.id].appeal.documentFlag) {
                userConnections[msg.chat.id].appeal.documentFlag = true;
                setTimeout(function () {
                    bot.emit('text', simulatedMessage);
                }, 3000);
                userConnections[msg.chat.id].status = 4;
            }
        }

    }
            
}

module.exports = PrivateMessageHandler